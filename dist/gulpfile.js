// Generated by CoffeeScript 1.10.0
(function() {
  var autoprefixer, base64, baseDir, baseSouceseDir, browserSync, concat, del, gulp, jade, minifyCss, minifyhtml, rev, revCollector, runSequence, spriter, uglify, unCss;

  gulp = require('gulp');

  del = require('del');

  uglify = require('gulp-uglify');

  minifyCss = require('gulp-minify-css');

  spriter = require('gulp-css-spriter');

  minifyhtml = require('gulp-minify-html');

  unCss = require('gulp-uncss');

  jade = require('gulp-jade');

  browserSync = require('browser-sync').create();

  runSequence = require('run-sequence');

  autoprefixer = require('gulp-autoprefixer');

  base64 = require('gulp-base64');

  concat = require('gulp-concat');

  rev = require('gulp-rev');

  revCollector = require('gulp-rev-collector');

  baseDir = './dist/';

  baseSouceseDir = './src/**/';

  gulp.task('default', function(callback) {
    return runSequence(['clean'], ['build'], ['serve', 'watch'], callback);
  });

  gulp.task('build', function(callback) {
    return runSequence(['copy'], ['minCss', 'minJs', 'jade'], callback);
  });

  gulp.task('clean', function(callback) {
    return del([baseDir], callback);
  });

  gulp.task('copy', function() {
    return gulp.src('*.*').pipe(gulp.dest(baseDir));
  });

  gulp.task('minJs', function() {
    return gulp.src(baseSouceseDir + '*.js').pipe(uglify()).pipe(gulp.dest(baseDir));
  });

  gulp.task('jade', function() {
    return gulp.src(baseSouceseDir + '*.jade').pipe(jade({
      petty: true
    })).pipe(minifyhtml({
      empty: true
    })).pipe(gulp.dest(baseDir));
  });

  gulp.task('minCss', function() {
    return gulp.src(baseSouceseDir + '*.css"').pipe(spriter({
      spriteShet: baseDir + 'images/sprite.png',
      pathToSpriteSheetFromCSS: '../images/sprite.png'
    })).pipe(minifyCss()).pipe(unCss({
      ignore: ['/active/']
    })).pipe(rev()).pipe(revCollector()).pipe(gulp.dest(baseDir));
  });

  gulp.task('concat', function() {
    return gulp.src("./src/*.js").pipe(concat("all.js"), {
      newLine: ';\n'
    }).pipe(gulp.dest(baseDir));
  });

  gulp.task('serve', function() {
    return browserSync.init({
      server: {
        baseDir: baseDir
      },
      port: 7411
    });
  });

  gulp.task('watch', function() {
    return gulp.watch(baseSouceseDir + '*.*', ['reload']);
  });

  gulp.task("reload", function(callback) {
    return runSequence(['build'], ['reload-browser'], callback);
  });

  gulp.task('reload-browser', function() {
    return browserSync.reload();
  });

  gulp.task('base64URi', function() {
    return gulp.src('./src/*.css').pipe(base64({
      baseDir: baseDir,
      extensions: ['svg', 'png', /\.jpg#datauri$/i],
      exclude: [/\.server\.(com|net)\/dynamic\//, '--live.jpg'],
      maxImageSize: 8 * 1024,
      debug: true
    })).pipe(concat('main.css')).pipe(gulp.dest(baseDir + 'css'));
  });

}).call(this);
